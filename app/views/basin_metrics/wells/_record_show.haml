
.progress_pane
  %div.close_circle= link_to(material_icon.cancel, basin_metrics_well_show_path(well['id']), method: :get, remote: true)
  .progress_content
    %div{id:"container"}
.record.record_description.well_record{'data-wellid': well['id']}
  %ul
    %li
      .title Well:
      .value #{well['name'].humanize} #{well['number']}
    %li
      .title % Complete:
      .record_attribute.value{'data-name':'percent_complete'}
        %div #{well['percent_complete']}
    %li
      .title Start/End Est:
      .record_attribute.nullable{'data-name':'est_schedule_range'}
        %input.date_selector_range{value: well['est_start'].blank? ? '' : "#{format_date(well['est_start'])} to #{format_date(well['est_end'])}", placeholder: 'pending'}
    %li
      .title Start Actual:
      .record_attribute.nullable{'data-name':'actual_start'}
        %input.date_selector{value: well['actual_start'].blank? ? '' : format_date(well['actual_start']), placeholder: 'pending'}
    %li.reservation
      .title Reserve Inventory:
      = select_options_tag('Inventory', get_reservation_options, value: get_reserved_type(well['id']), prompt: "none", class: 'number_selector')
      .title Qty:
      %input.number_selector{type:'number', min:0, value: get_reserved_qty(well['id'])}
      - if BasinMetrics::Well.find(well['id']).reservations.present?
        %span.locked= material_icon.lock
      - else
        %span.unlocked= material_icon.lock_open
    %li
      .title Directions:
      .value.comment= well['directions'].blank? ? 'none' : well['directions']
    %li
      .title Comments:
      .value.comment= well['comment'].blank? ? 'none' : well['comment']

:javascript
  $(document).ready(function(){
    var date_selectors = $('.date_selector');
    flatpickr(".date_selector", {
      utc: true,
      weekNumbers: true,
      altInput: true,
      altFormat: "M j, Y",

      onClose: function(selectedDates, dateStr, instance) {
        var $el = $(instance.element._flatpickr.altInput);
        var new_content = $el.val();
        sendUpdate($el, new_content);
      }
    });
    date_selectors.each(function(){$(this).remove()}); //Remove duplicate inputs

    var date_range_selectors = $('.date_selector_range');
    flatpickr(".date_selector_range", {
      utc: true,
      mode: 'range',
      weekNumbers: true,
      altInput: true,
      altFormat: "M j, Y",

      onClose: function(selectedDates, dateStr, instance) {
        var $el = $(instance.element._flatpickr.altInput);
        var new_content = $el.val();
        sendUpdate($el, new_content);
      }
    });
    date_range_selectors.each(function(){$(this).remove()}); //Remove duplicate inputs
  });

  var percent_complete = getWellPercentComplete();
  var stroke_width = 16;
  var bar = new ProgressBar.Circle(container, {
    color: '#CCDBDC', //Text color
    // This has to be the same size as the maximum width to
    // prevent clipping
    strokeWidth: stroke_width,
    trailWidth: 10,
    easing: 'easeInOut',
    duration: 1200,
    text: {
      autoStyleContainer: false
    },
    from: { color: '#9faeaf', width: 10 },
    to: { color: '#298889', width: stroke_width },
    // Set default step function for all animate calls
    step: function(state, circle) {
      circle.path.setAttribute('stroke', state.color);
      circle.path.setAttribute('stroke-width', state.width);

      var value = Math.round(circle.value() * 100);
      if (value === 0) {
        circle.setText('0' + '%');
      } else {
        circle.setText(value + '%');
      }

    }
  });
  bar.text.style.fontFamily = '"Raleway", Helvetica, sans-serif';
  bar.text.style.fontSize = '2rem';
  bar.animate(percent_complete);  // Number from 0.0 to 1.0

  function getWellPercentComplete(){
    return (parseFloat("#{well['percent_complete']}"))/100;
  }